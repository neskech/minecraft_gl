
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////

macro_rules! GenericID{
    ( 

       
        $_vis:vis enum $variant:ident {
            $(
                $( #[$field_meta:meta] )*
        //      ^~~~field attributes~~~!^
                $field_vis:vis $field_name:ident ( $field_ty:ty )
    //      ^~~~~~~~~~~~~~~~~a single field~~~~~~~~~~~~~~~^
            ),* $(,)? 
         } $(, $($tt:tt)* )? ) 
    
    
     => {
        
        pub fn Generic<T: 'static>() -> usize{
            let ID: std::any::TypeId = std::any::TypeId::of::<T>();

            //define the const ID variables
            let mut i: usize = 0;

            $(
                if (i += 1) == () && ID == std::any::TypeId::of::<$field_name>(){
                    return i - 1;
                }
            )*
            
            panic!("Generic ID function failed!");
        }
    };
}

////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////

macro_rules! InnerComponent {
    ( 
       
        $_vis:vis enum $variant:ident {
            $(
                $( #[$field_meta:meta] )*
        //      ^~~~field attributes~~~!^
                $field_vis:vis $field_name:ident ( $field_ty:ty )
    //      ^~~~~~~~~~~~~~~~~a single field~~~~~~~~~~~~~~~^
            ),* $(,)? 
         } $(, $($tt:tt)* )? ) 
    
    
     => {
        
        pub fn GetInnerComponent<T: super::component::Component + proc_macro::CompObj + 'static>(comp: &ComponentType) -> &T
        {
            return match comp {
                $(
                   ComponentType:: $field_name (inner) => {
                         let s: & dyn proc_macro::CompObj = inner;
                         let t: & T = s.AsAny().downcast_ref::<T>().expect("");
                         t
                    },
                )*
            }
        }

        pub fn GetInnerComponentMut<T: super::component::Component + proc_macro::CompObj + 'static>(comp: &mut ComponentType) -> &mut T
        {
            return match comp {
                $(
                   ComponentType:: $field_name (inner) => {
                         let s: &mut dyn proc_macro::CompObj = inner;
                         let t: &mut T = s.AsAnyMut().downcast_mut::<T>().expect("");
                         t
                    },
                )*
            }
        }
    };
}

////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////

macro_rules! Args {
    (
        $struct_name:ident,
        $($field_name:ident, $type:ty),*
    ) => {
        
        pub struct $struct_name {
            $(
                $field_name : $type,
            )*
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
 macro_rules! DefaultArgs {
(
    $struct_name:ident
) => {
    
    pub struct $struct_name {

    }
}
}

////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////



pub(crate) use GenericID;
pub(crate) use InnerComponent;
pub(crate) use Args;
pub(crate) use DefaultArgs;
