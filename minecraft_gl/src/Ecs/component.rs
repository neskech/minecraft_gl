
use proc_macro::CompObj;
use proc_macro_derive::ComponentObj;
use super::util::*;

////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
///                                 COMPONENT TRAIT
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////

pub trait Component{
    type Args;
    fn New(args: Self::Args) -> ComponentType;
}


////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
///                                 ENUM DEFINTIONS AND MACRO USEAGES
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////

pub enum ComponentType{
    Transform(Transform),
    Tag(Tag),
    AABB(AABB),

}

GenericID!(
    pub enum ComponentType{
        Transform(super::Transform),
        Tag(super::Tag),
        AABB(super::AABB),
    } 
);

InnerComponent!(
    pub enum ComponentType{
        Transform(super::Transform),
        Tag(super::Tag),
        AABB(super::AABB),
    } 
);


////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
///                                 COMPONENT DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
#[derive(ComponentObj)]
pub struct Transform {
    Pos: (f32, f32),
    Rotation: (f32, f32, f32),
    Scale: (f32, f32, f32)
}

DefaultArgs!(TransformArgs);

impl Component for Transform{
    type Args = TransformArgs;
    fn New(_: Self::Args) -> ComponentType {
        ComponentType::Transform( Self {
            Pos: (0f32, 0f32),
            Rotation: (0f32, 0f32, 0f32),
            Scale: (1f32, 1f32, 1f32)
        } )
    }

}

impl Transform{

}

////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
/// 
#[derive(ComponentObj)]
pub struct Tag {
    Name: &'static str,
}

Args!(TagArgs, Name, &'static str);

impl Component for Tag{
    type Args = TagArgs;
    fn New(args: Self::Args) -> ComponentType {
        ComponentType::Tag( Self {
            Name: args.Name,
        } )
    }
    
}

////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////
#[derive(ComponentObj)]
pub struct AABB {
    extentsX: f32,
    extentsY: f32,
    extentsZ: f32,
}

Args!(AABBArgs, extentsX, f32, extentsY, f32, extentsZ, f32);

impl Component for AABB{
    type Args = AABBArgs;
    fn New(args: Self::Args) -> ComponentType {
        ComponentType::AABB( Self {
            extentsX: args.extentsX,
            extentsY: args.extentsY,
            extentsZ: args.extentsZ,
        } )
    }
    
}